name: End To End Tests
on:
  push: { branches: [main] }
  pull_request_target: {}
  pull_request_review_comment: { types: [created] }

jobs:
  # This job checks whether we trust this event and therefore dare executing the code change.
  # Since we use the pull_request_target trigger, this workflow has access to all our secrets.
  # Even if it is submitted from a fork with this trigger it still has access to our secrets,
  # including for example a read/write Github token, which is very powerful and could change
  # our code!
  # It is a security risk if we don't have all jobs depending on this succeeding, or if
  # this condition isn't correct.
  is-trusted:
    name: Determine If We Trust This Code Diff
    runs-on: ubuntu-20.04
    steps:
      name: Log all the parts of the check for debugging purposes, and verifying we are only letting trusted code run with our secrets
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Event Action : ${{ github.event.action }}"
        echo "Github Ref: ${{ github.ref }}"
        echo "PR Author Association: ${{ github.event.pull_request.author_association }}"
        echo "Review Comment Author Association: ${{ github.event.comment.author_association }}"
        echo "Review Comment Body: ${{ github.event.comment.body }}"
        echo "Whole event: ${{ github.event }}"

      name: Return Non-Zero Exit Code If Untrusted
      # Note the negative at the start. Inside the condition we specify who is allowed
      # and then negate it to be able to throw on unauthorized`
      if: |
        !(
          (
            github.event_name == "push" && github.ref == 'refs/heads/main'
          ) ||
          (
            github.event_name == "pull_request_target" &&
            github.event.pull_request.author_association == 'OWNER'
          ) ||
          (
            github.event_name == "pull_request_review_comment" &&
            github.event.comment.author_association == 'OWNER' &&
            github.event.comment.body == '&RUN_TESTS_WITH_SECRETS'
          )
        )
      shell: bash
      run: |
        RED='\033[0;31m'
        echo -e "${RED}This code change is not authorized to be run with our secrets such as logins and API keys. In order to get this code run get an owner to verify that your code change has no malicious parts in it and use the comment command to run these tests"

  build-docker-containers:
    name: Build And Push Docker Containers
    needs: is_trusted
    runs-on: ubuntu-20.04
    env:
      # Github Actions doesn't support yaml anchors yet apparently
      # if they do in the future we can use it, but until then when you
      # update this, just do a find and replace.
      # Remember new containers are built exactly if you change this version number
      # to a nonexistent one for the ci containers. It has nothing to do with Dockerfile
      # changes, so it's purely manual
      repository: sctrainer/main
      ci-container-tag: ci-container-v1
      ci-chrome-tag: ci-chrome-v1
      production-tag: production-${{ github.sha }}
    steps:
      - name: Checkout from Push event
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v2

      - name: Checkout from pull_request_target event
        # We just add in the authorization condition here again to be double safe that we
        # are not checking out anything dangerous as we are about to give privileged access
        # to the code checked out
        if: |
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.author_association == 'OWNER'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout from pull_request_review_comment event
        # We just add in the authorization condition here again to be double safe that we
        # are not checking out anything dangerous as we are about to give privileged access
        # to the code checked out
        if: |
          github.event_name == "pull_request_review_comment" &&
          github.event.comment.author_association == 'OWNER' &&
          github.event.comment.body == '&RUN_TESTS_WITH_SECRETS'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if CI Container image already up to date
        id: ci-container-up-to-date
        run: curl --silent -f -lSL https://index.docker.io/v1/repositories/${{ env.repository }}/tags/${{ env.ci-container-tag }}
        continue-on-error: true

      - name: Build and Push CI Container image
        uses: docker/build-push-action@v2
        if: ${{ steps.ci-container-up-to-date.outcome == 'failure' }}
        with:
          push: true
          target: ci
          tags: ${{ env.repository }}:${{ env.ci-container-tag }}

      - name: Check if CI Chrome image already up to date
        id: ci-chrome-up-to-date
        run: curl --silent -f -lSL https://index.docker.io/v1/repositories/${{ env.repository }}/tags/${{ env.ci-chrome-tag }}
        continue-on-error: true

      - name: Build and Push CI Chrome image
        uses: docker/build-push-action@v2
        if: ${{ steps.ci-chrome-up-to-date.outcome == 'failure' }}
        with:
          push: true
          target: ci-chrome
          tags: ${{ env.repository }}:${{ env.ci-chrome-tag }}

      - name: Build and Push Production image
        uses: docker/build-push-action@v2
        with:
          push: true
          target: production
          tags: ${{ env.repository }}:${{ env.production-tag }}


  check-javascript-asset-size:
    name: Check Javascript Asset Size
    runs-on: ubuntu-20.04
    container: sctrainer/main:production-${{ github.sha }}
    needs: build-docker-containers
    steps:
      - name: Install Bash (as production image doesn't include it)
        run: apk add bash

      - name: Check Javascript Asset Filesize Less Than 200Kb
        shell: bash
        run: |
          num_bytes=$(gzip /app/public/main.js -c | wc -c)
          RED='\033[0;31m'
          (( num_bytes < (200 * 1000) )) || \
            (\
              echo -e "${RED}ERROR: Javascript Asset Size Has Grown Unexpectedly. Gzipped Size Is Now $num_bytes bytes" \
              && exit 1 \
            )

  cypress-end-to-end-tests:
    name: "${{ matrix.platform.browserString }} on screen size of ${{ matrix.sizeRelevant.deviceName }} Linux Cypress E2E Tests"
    runs-on: ubuntu-20.04
    container:
      image: sctrainer/main:ci-chrome-v1
      # This is needed for Firefox running as described here
      # https://github.com/cypress-io/github-action/issues/104
      options: --user 1001
    needs: build-docker-containers
    env:
      PORT: 8080
    services:
      sctrainer-server:
        image: sctrainer/main:production-${{ github.sha }}
        env:
          PORT: ${{ env.PORT }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - browser: chrome
            browserString: Chrome
        # Values for devices taken from https://docs.cypress.io/api/commands/viewport#Arguments
        sizeRelevant:
          - viewportConfig: "viewportWidth=1280,viewportHeight=800"
            # We include the dynamic viewports just one place as it doesn't matter what initial
            # viewport size it is so no need to include it several times
            extraSpecs: [cypress/tests/uses-dynamic-viewports/*]
            deviceName: Macbook 13
          - viewportConfig: "viewportWidth=375,viewportHeight=667"
            extraSpecs: []
            deviceName: iPhone 8
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Handle Yarn and Cypress caching
        uses: actions/cache@v2
        env:
          cache-name: yarn-cypress-cache-v1
        with:
          path: |
            ~/.cache/yarn
            ~/.cache/Cypress
          key: ${{ job.container.image }}-${{ env.cache-name }}-${{ hashFiles('end-to-end-tests/**/yarn.lock')}}
          # Note we purposefully don't specify fallback restore keys.
          # Explanation: https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/

      - name: Install Dependencies
        run: yarn --frozen-lockfile
        working-directory: end-to-end-tests

      - name: Install Cypress
        run: yarn run cypress install
        working-directory: end-to-end-tests

      - name: Log Cypress Info
        run: npx cypress info
        working-directory: end-to-end-tests

      - name: Run Cypress Tests
        working-directory: end-to-end-tests
        run: |
          yarn run cypress run \
          --browser ${{ matrix.platform.browser }} \
          --config "${{ matrix.sizeRelevant.viewportConfig }},baseUrl=http://sctrainer-server:${{ env.PORT }}" \
          --spec cypress/tests/*,${{ matrix.sizeRelevant.extraSpecs[0] }},${{ matrix.sizeRelevant.extraSpecs[1] }},${{ matrix.sizeRelevant.extraSpecs[2] }}

      - name: Upload recorded videos
        uses: actions/upload-artifact@v1
        if: failure()
        continue-on-error: true
        with:
          name: VIDEOS-cypress-${{ matrix.platform.browser }}-${{ matrix.sizeRelevant.deviceName }}-${{ github.sha }}
          path: end-to-end-tests/cypress/videos

      - name: Upload recorded Screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        continue-on-error: true
        with:
          name: SCREENSHOTS-cypress-${{ matrix.platform.browser }}-${{ matrix.sizeRelevant.deviceName }}-${{ github.sha }}
          path: end-to-end-tests/cypress/screenshots

  # deploy:
  #   # We only deploy if it's the main branch and they were a success
  #   if: ${{ success() && github.ref == 'refs/heads/main' }}
  #   # Important to keep this up to date, depending on all jobs
  #   needs:
  #     [
  #       cypress-end-to-end-tests,
  #       check-javascript-asset-size,
  #     ]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Deploy newest version
  #       run: python scripts/trigger-deploy.py
  #       env:
  #         SECRET: ${{ secrets.GOOGLE_CLOUD_DEPLOY_SECRET }}
  #         API_KEY: ${{ secrets.GOOGLE_CLOUD_DEPLOY_API_KEY }}
#
#
# Useful for debugging:
# - uses: mxschmitt/action-tmate@v3
#   with:
#     limit-access-to-actor: true
#     sudo: false
