name: CI and CD
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-docker-containers:
    name: Build And Push Docker Containers
    runs-on: ubuntu-20.04
    env:
      # Github Actions doesn't support yaml anchors yet apparently
      # if they do in the future we can use it, but until then when you
      # update this, just do a find and replace.
      # Remember new containers are built exactly if you change this version number
      # to a nonexistent one for the ci containers. It has nothing to do with Dockerfile
      # changes, so it's purely manual
      repository: sctrainer/main
      ci-container-tag: ci-container-v1
      ci-chrome-tag: ci-chrome-v1
      production-tag: production-${{ github.sha }}
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if CI Container image already up to date
        id: ci-container-up-to-date
        run: curl --silent -f -lSL https://index.docker.io/v1/repositories/${{ env.repository }}/tags/${{ env.ci-container-tag }}
        continue-on-error: true

      - name: Build and Push CI Container image
        uses: docker/build-push-action@v2
        if: ${{ steps.ci-container-up-to-date.outcome == 'failure' }}
        with:
          push: true
          target: ci
          tags: ${{ env.repository }}:${{ env.ci-container-tag }}

      - name: Check if CI Chrome image already up to date
        id: ci-chrome-up-to-date
        run: curl --silent -f -lSL https://index.docker.io/v1/repositories/${{ env.repository }}/tags/${{ env.ci-chrome-tag }}
        continue-on-error: true

      - name: Build and Push CI Chrome image
        uses: docker/build-push-action@v2
        if: ${{ steps.ci-chrome-up-to-date.outcome == 'failure' }}
        with:
          push: true
          target: ci-chrome
          tags: ${{ env.repository }}:${{ env.ci-chrome-tag }}

      - name: Build and Push Production image
        uses: docker/build-push-action@v2
        with:
          push: true
          target: production
          tags: ${{ env.repository }}:${{ env.production-tag }}

  lint-and-unit-tests:
    name: Linting And Unit Tests
    runs-on: ubuntu-20.04
    container: sctrainer/main:ci-container-v1
    needs: build-docker-containers
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Assert elm-verify-examples is up to date
        run: ./scripts/checks/elm-verify-examples.sh && ./scripts/helpers/check-for-uncommitted-changes.sh

      - name: Run elm-format
        run: ./scripts/checks/elm-format.sh

      - name: Run elm-analyse
        run: ./scripts/checks/elm-analyse.sh

      - name: Run unit tests
        run: ./scripts/checks/elm-test.sh

  check-javascript-asset-size:
    name: Check Javascript Asset Size
    runs-on: ubuntu-20.04
    container: sctrainer/main:production-${{ github.sha }}
    needs: build-docker-containers
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Bash (as production image doesn't include it)
        run: apk add bash

      - name: Check Javascript Asset Filesize Less Than 200Kb
        shell: bash
        run: |
          num_bytes=$(gzip /app/public/main.js -c | wc -c)
          RED='\033[0;31m'
          (( num_bytes < (200 * 1000) )) || \
            (\
              echo -e "${RED}ERROR: Javascript Asset Size Has Grown Unexpectedly. Gzipped Size Is Now $num_bytes bytes" \
              && exit 1 \
            )

  cypress-end-to-end-tests:
    name: "${{ matrix.platform.browserString }} on screen size of ${{ matrix.sizeRelevant.deviceName }} Linux Cypress E2E Tests"
    runs-on: ubuntu-20.04
    container:
      image: sctrainer/main:ci-chrome-v1
      # This is needed for Firefox running as described here
      # https://github.com/cypress-io/github-action/issues/104
      options: --user 1001
    needs: build-docker-containers
    env:
      PORT: 8080
    services:
      sctrainer-server:
        image: sctrainer/main:production-${{ github.sha }}
        env:
          PORT: ${{ env.PORT }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - browser: chrome
            browserString: Chrome
        # Values for devices taken from https://docs.cypress.io/api/commands/viewport#Arguments
        sizeRelevant:
          - viewportConfig: "viewportWidth=1280,viewportHeight=800"
            # We include the dynamic viewports just one place as it doesn't matter what initial
            # viewport size it is so no need to include it several times
            extraSpecs: [cypress/tests/uses-dynamic-viewports/*]
            deviceName: Macbook 13
          - viewportConfig: "viewportWidth=375,viewportHeight=667"
            extraSpecs: []
            deviceName: iPhone 8
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Handle Yarn and Cypress caching
        uses: actions/cache@v2
        env:
          cache-name: yarn-cypress-cache-v1
        with:
          path: |
            ~/.cache/yarn
            ~/.cache/Cypress
          key: ${{ job.container.image }}-${{ env.cache-name }}-${{ hashFiles('end-to-end-tests/**/yarn.lock')}}
          # Note we purposefully don't specify fallback restore keys.
          # Explanation: https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/

      - name: Install Dependencies
        run: yarn --frozen-lockfile
        working-directory: end-to-end-tests

      - name: Install Cypress
        run: yarn run cypress install
        working-directory: end-to-end-tests

      - name: Log Cypress Info
        run: npx cypress info
        working-directory: end-to-end-tests

      - name: Run Cypress Tests
        working-directory: end-to-end-tests
        run: |
          yarn run cypress run \
          --browser ${{ matrix.platform.browser }} \
          --config "${{ matrix.sizeRelevant.viewportConfig }},baseUrl=http://sctrainer-server:${{ env.PORT }}" \
          --spec cypress/tests/*,${{ matrix.sizeRelevant.extraSpecs[0] }},${{ matrix.sizeRelevant.extraSpecs[1] }},${{ matrix.sizeRelevant.extraSpecs[2] }}

      - name: Upload recorded videos
        uses: actions/upload-artifact@v1
        if: failure()
        continue-on-error: true
        with:
          name: VIDEOS-cypress-${{ matrix.platform.browser }}-${{ matrix.sizeRelevant.deviceName }}-${{ github.sha }}
          path: end-to-end-tests/cypress/videos

      - name: Upload recorded Screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        continue-on-error: true
        with:
          name: SCREENSHOTS-cypress-${{ matrix.platform.browser }}-${{ matrix.sizeRelevant.deviceName }}-${{ github.sha }}
          path: end-to-end-tests/cypress/screenshots

  deploy:
    # We only deploy if it's the main branch and they were a success
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    # Important to keep this up to date, depending on all jobs
    needs:
      [
        cypress-end-to-end-tests,
        lint-and-unit-tests,
        check-javascript-asset-size,
      ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: python scripts/trigger-deploy.py
        env:
          SECRET: ${{ secrets.GOOGLE_CLOUD_DEPLOY_SECRET }}
          API_KEY: ${{ secrets.GOOGLE_CLOUD_DEPLOY_API_KEY }}
#
#
# Useful for debugging:
# - uses: mxschmitt/action-tmate@v3
#   with:
#     limit-access-to-actor: true
#     sudo: false
